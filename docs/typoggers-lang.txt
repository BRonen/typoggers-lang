-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/bronen/typoggers-lang#readme</a>
@package typoggers-lang
@version 0.1.0.0

module Parser
parse :: [Token] -> Expr
data Token
TokenLet :: Token
TokenType :: Token
TokenTypeof :: Token
TokenIn :: Token
TokenInt :: Int -> Token
TokenBool :: Bool -> Token
TokenString :: String -> Token
TokenLiteral :: String -> Token
TokenQuote :: Token
TokenFatArrow :: Token
TokenArrow :: Token
TokenEq :: Token
TokenPlus :: Token
TokenMinus :: Token
TokenTimes :: Token
TokenDiv :: Token
TokenOB :: Token
TokenCB :: Token
TokenColon :: Token
TokenPipe :: Token
TokenAmpersand :: Token
data Expr
Let :: String -> TypeNote -> Expr -> Expr -> Expr
LetInfer :: String -> Expr -> Expr -> Expr
TypeDef :: TypeDef -> Expr
data TypeDef
TypeAlias :: String -> TypeNote -> Expr -> TypeDef
FuncDef :: FuncDef -> TypeDef
data FuncDef
Def :: String -> TypeNote -> TypeNote -> Expr -> FuncDef
DefInfer :: String -> TypeNote -> Expr -> FuncDef
FuncApp :: FuncApp -> FuncDef
data FuncApp
App :: String -> Expr -> FuncApp
LowTerm :: LowTerm -> FuncApp
data LowTerm
Plus :: LowTerm -> HighTerm -> LowTerm
Minus :: LowTerm -> HighTerm -> LowTerm
HighTerm :: HighTerm -> LowTerm
data HighTerm
Times :: HighTerm -> Factor -> HighTerm
Div :: HighTerm -> Factor -> HighTerm
Factor :: Factor -> HighTerm
data Factor
String :: String -> Factor
Int :: Int -> Factor
Name :: String -> Factor
Bool :: Bool -> Factor
Brack :: Expr -> Factor
data TypeNote
Type :: String -> TypeNote
Typeof :: Expr -> TypeNote
TypeUnion :: TypeNote -> TypeNote -> TypeNote
TypeIntersection :: TypeNote -> TypeNote -> TypeNote
TypeFunc :: TypeNote -> TypeNote -> TypeNote
instance GHC.Show.Show Parser.Factor
instance GHC.Show.Show Parser.HighTerm
instance GHC.Show.Show Parser.LowTerm
instance GHC.Show.Show Parser.FuncApp
instance GHC.Show.Show Parser.FuncDef
instance GHC.Show.Show Parser.TypeDef
instance GHC.Show.Show Parser.Expr
instance GHC.Show.Show Parser.TypeNote
instance GHC.Show.Show Parser.Token
instance GHC.Base.Functor Parser.HappyIdentity
instance GHC.Base.Applicative Parser.HappyIdentity
instance GHC.Base.Monad Parser.HappyIdentity

module Lexer
lexer :: String -> [Token]

module Checker
checker :: Expr -> Either String TypeValue
instance GHC.Show.Show Checker.TypeValue
instance GHC.Classes.Eq Checker.TypeValue

module Backend.Eval
eval :: Expr -> IO ()
